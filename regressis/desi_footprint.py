#!/usr/bin/env python
# coding: utf-8

## Load information about DESI footprint and the different
## photometric footprints or region of interest.

## Data/Legacy_Imaging_DR9_footprint_256.fits is built from the fracarea_12290 given by the pixweight
## file generated by desitarget. DES imprint is extracted from an old file given by Anand.
## It is built in Target_Selection/Build_footprint_file/

import os
import logging

import healpy as hp
import numpy as np
import fitsio

from .utils import hp_in_box


logger = logging.getLogger('DR9Footprint')


class DR9Footprint(object):
    """
    Photometric footprint DR9
    Name: North = MzLS, South = DECaLZ (without DES), DES
    WARNING: ISSOUTH is everything with Dec. < 32.275
    """

    def __init__(self, nside=256, mask_lmc=False, clear_south=False, mask_around_des=False):
        """
        Initialize :class:`DR9Footprint` .

        Parameters
        ----------
        nside : int, default=256
            Give the resolution of the output masks.

        mask_lmc : bool, default=False
            Mask out the Large Magellanic Cloud, useful for QSO target selection.

        clear_south : bool, default=False
            Mask out disconnected area in the NGC South, useful to compute angular correlation function.
            # TODO: why???

        mask_around_des : bool, default=False
            Mask the border of the footprint around DES which is contained in South; useful for systematic weights.
            # TODO: why???
        """
        self.nside = nside
        self.mask_lmc = mask_lmc
        self.clear_south = clear_south
        self.mask_around_des = mask_around_des
        logger.info(f'Load DR9 footprint with mask_lmc={self.mask_lmc} and clear_south={self.clear_south}')

        self.data = fitsio.read(os.path.join(os.path.dirname(__file__), '..', 'data', 'Legacy_Imaging_DR9_footprint_256.fits'))
        # TODO: why not update_map here once for all???


    def update_map(self, pixmap):
        """
        Apply mask and ud_grade input pixmap.

        Parameters
        ----------
        pixmap: pixmap to return with mask at the correct nside
        """
        if self.mask_lmc:
            pixmap[hp_in_box(256, [52, 120, -90, -50], inclusive=True)] = False

        if self.clear_south:
            pixmap[hp_in_box(256, [120, 150, -45, -10], inclusive=True) + hp_in_box(256, [150, 180, -45, -15], inclusive=True) + hp_in_box(256, [210, 240, -20, -12], inclusive=True)] = False

        if self.mask_around_des:
            mask_around_des = np.zeros(hp.nside2npix(256), dtype=bool)
            mask_around_des[hp_in_box(256, [-120, 0, -90, -18.5], inclusive=True) + hp_in_box(256, [0, 120, -90, -17.4], inclusive=True)] = True
            mask_around_des[self.data['ISDES']] = False
            pixmap[mask_around_des] = False

        if self.nside != 256:
            pixmap = hp.ud_grade(pixmap, self.nside, order_in='NESTED')

        return pixmap


    def get_full(self):
        """
        Return full DR9 footprint.
        """
        return self.update_map(self.data['ISDR9'])


    def get_ngc_sgc(self):
        """
        Return NGC / SGC mask.
        """
        return self.update_map(self.data['ISNGC']), self.update_map(self.data['ISSGC'])


    def get_imaging_surveys(self):
        """
        Return North / South / DES
        """
        return self.update_map(self.data['ISNORTH']), self.update_map(self.data['ISSOUTH'] & ~self.data['ISDES']), self.update_map(self.data['ISDES'])


    def get_elg_region(self, ngc_sgc_split=False):
        """
        Return North / South & DES ( -30 < Dec < 32.275) / DES (Dec. < -30)
        """

        dec, all_south = self.data['DEC'], self.data['ISSOUTH']

        south_mid = all_south.copy()
        south_mid[dec <= -30] = False

        south_pole = all_south.copy()
        south_pole[dec > -30] = False

        if ngc_sgc_split:
            return self.update_map(self.data['ISNORTH']), self.update_map(south_mid & self.data['ISNGC']), self.update_map(south_mid & self.data['ISSGC']), self.update_map(south_pole)

        return self.update_map(self.data['ISNORTH']), self.update_map(south_mid), self.update_map(south_pole)
