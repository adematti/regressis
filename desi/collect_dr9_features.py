
#!/usr/bin/env python

import os
import sys
import logging
import numpy as np
import fitsio

from desitarget.randoms import pixmap

#import warnings
#warnings.simplefilter('error')

from Regressis import setup_logging
logger = logging.getLogger("Collect_dr9_feature")

from time import time
start = time()


# from argparse import ArgumentParser
# ap = ArgumentParser("Generate a map of HEALPixels with information on survey coverage, expected stellar density, and target density")
# ap.add_argument("randoms",
#                 help='File of random points generated by, e.g., select_randoms')
# ap.add_argument("targets",
#                 help='File of targets generated by, e.g., select_targets (should be the same Data Release as used to make the randoms')
# ap.add_argument("dest",
#                 help='Output file name to write map of HEALPixel weights in the NESTED scheme (e.g. /project/projectdirs/desi/target/catalogs/pixweight-dr4-0.20.0.fits)')
# ap.add_argument("--nside", type=int,
#                 help='The resolution (HEALPixel nside number) at which to build the map (defaults to 256)',
#                 default="256")
# ap.add_argument("--gaialoc",
#                 help='A FITS file that already contains the Gaia stellar densities at nside to speed-up density calculations')
#
# ns = ap.parse_args()

def make_imaging_weight_map(randoms, targets, dest, nside, gaialoc):

    if not os.path.exists(randoms):
        logger.critical('Input directory does not exist: {}'.format(randoms))
        sys.exit(1)

    if not os.path.exists(targets):
        logger.critical('Input directory does not exist: {}'.format(targets))
        sys.exit(1)

    hdr = fitsio.read_header(randoms, "RANDOMS")
    #ADM add HEALPixel and gaialoc information to the header
    hdr['GAIALOC'] = gaialoc
    hdr['HPXNSIDE'] = nside
    hdr['HPXNEST'] = True

    pixmap, survey = pixmap(randoms, targets, hdr["DENSITY"], nside=nside, gaialoc=gaialoc)
    hdr["SURVEY"] = survey

    #ADM write out the map
    #logger.info('Writing pixel map to {}'.format(dest))

    #fitsio.write(dest, pixmap, extname='PIXWEIGHTS', header=hdr, clobber=True)
    #logger.info('wrote map of HEALPixel weights (in the nested scheme) to {}'.format(dest))
    logger.info('Done...t={:.1f}s'.format(time()-start))

    return pixmap, hdr



## stardens file are generated extracted with the following from a pixweight computed without --gaialoc (take 1hours to run it without this option...)
# import fitsio
# nside = 512
# stardens = fitsio.read(f'pixweight-dr9-{nside}.fits', columns=['HPXPIXEL', 'STARDENS'])
# fits = fitsio.FITS(f'stardens-{nside}.fits', 'rw')
# fits.write(stardens)
# fits.close()



if __name__ == '__main__':

    setup_logging()

    randoms = '/global/cfs/projectdirs/desi/target/catalogs/dr9/0.49.0/randoms/resolve/randoms-1-7.fits'
    targets = '/global/cfs/projectdirs/desi/target/catalogs/dr9/0.49.0/targets/main/resolve/dark/targets-dark-hp-11.fits'
    outdir = '../data'

    nside = 128
    gaialoc = f'../data/stardens-{nside}.fits'
    pixamp, hdr = make_imaging_weight_map(randoms, targets, outdir, nside, gaialoc)

    print(hdr)
    print(pixmap)
